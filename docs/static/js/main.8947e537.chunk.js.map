{"version":3,"sources":["components/NavBar.jsx","components/TestLibrary.jsx","components/NewTest.jsx","redux/actions.js","components/Print.jsx","components/TestPrint.jsx","redux/reducer.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","AppBar","position","Toolbar","Grid","container","spacing","direction","justifyContent","alignItems","item","to","style","textDecoration","color","Typography","variant","noWrap","href","TestLibrary","gutterBottom","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","this","testProcedure","map","index","scope","testId","testDescription","react","Component","ConnectedTestLibrary","connect","state","dispatch","data","AddTest","id","event","console","log","preventDefault","addTest","setState","alert","target","value","onSubmit","e","handleSubmit","noValidate","autoComplete","TextField","onChange","updateTestId","label","defaultValue","updateTestDescription","multiline","maxRows","Button","type","ConnectedAddItem","ref","React","createRef","Print","TestPrint","ConnectedTestPrint","initialProcedure","action","undefined","new_state","deepcopy","push","store","createStore","NoMatch","location","pathname","App","exact","path","NewTest","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8947e537.chunk.js","sourcesContent":["import { Link, Route } from \"react-router-dom\";\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n\r\nimport React from 'react';\r\nimport '../styles/navbar.css'\r\n\r\nfunction NavBar(props){\r\n  return(\r\n    <div className=\"navBar\">\r\n        <AppBar position = 'relative'>\r\n            <Toolbar>\r\n                <Grid container spacing={10} direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                    <Grid item><Link to=\"/\" style={{textDecoration: 'none', color: \"white\"}}> <Typography variant='h4' noWrap>Test Library</Typography></Link></Grid>                   \r\n                    <Grid item><Link to=\"/newtest\" style={{textDecoration: 'none', color: \"white\"}}><Typography variant='h4' noWrap>New Test</Typography></Link></Grid>\r\n                    <Grid item><Typography variant='h4' noWrap><a style={{textDecoration: 'none', color: \"white\"}} href = 'https://github.com/TaylorFurman/react-redux-test-procedure'>Github Repo</a></Typography></Grid>\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import react from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Material UI components\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport '../styles/leader-board.css'\r\n\r\n\r\nclass TestLibrary extends (react.Component){\r\n    render(){\r\n        return(\r\n            <div>\r\n                <br/><br/>\r\n            <Typography variant=\"h4\" gutterBottom>Test Library</Typography>\r\n            <br/>\r\n            <Typography variant=\"body1\" gutterBottom>Click test below to access the test method, or click \"New Test\" to add additional test procedures</Typography>\r\n            <br/>            \r\n                <TableContainer component={Paper} >\r\n                    <Table aria-label='leaderboard' >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Test ID</TableCell>\r\n                                <TableCell align=\"left\">Test Description</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>                     \r\n                            <TableBody>\r\n                                {/*Not sure how the data from store is retrieved here */}\r\n                            {this.props.testProcedure.map((item,index)=>{\r\n                            return <TableRow key={index}>\r\n                                <TableCell component=\"th\" scope=\"row\"><Link to={`/test/{${item.testId}}`}>{item.testId}</Link></TableCell>\r\n                                <TableCell align=\"left\">{item.testDescription}</TableCell> \r\n                            </TableRow>\r\n                            })}                                                        \r\n                        </TableBody>                      \r\n                    </Table>\r\n                </TableContainer>                      \r\n            </div> \r\n        )\r\n    }  \r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n\treturn {testProcedure: state.testProcedure};\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n\treturn {\r\n    TestLibrary: function (data) {\r\n      dispatch(TestLibrary(data))\r\n    }\r\n  }\r\n}\r\n\r\nvar ConnectedTestLibrary = connect(mapStateToProps, mapDispatchToProps)(TestLibrary);\r\n\r\nexport default ConnectedTestLibrary;\r\n\r\n\r\n\r\n\r\n//Non important stuff below\r\n\r\n// const useStyles = makeStyles({\r\n//     table:{\r\n//         minWidth: 650,\r\n//     }\r\n// })\r\n\r\n\r\n// function //createData(testId, testDescription){\r\n//     return{testId, testDescription}\r\n// }\r\n\r\n//update this in order to add on more rows\r\n// const rows =[\r\n//     createData('Density', \"Get the density of a fluid using a 100mL graduated cylinder and hydrometer.\"),\r\n//     createData('pH', \"Get the pH of a fluid using a pH probe and 100mL beaker\"),\r\n// ]\r\n   \r\n//function HomePage(props){","import react from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\n//Material UI\r\nimport TextField from '@material-ui/core/TextField'\r\n//import { makeStyles } from '@material-ui/core/styles';\r\n// import AddIcon from '@material-ui/icons/Add';\r\n// import Fab from '@material-ui/core/Fab';\r\n// import Tooltip from '@material-ui/core/Tooltip';\r\n// import Chip from '@material-ui/core/Chip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//Redux\r\nimport {addTest} from '../redux/actions.js'\r\n\r\n\r\n//Control the styling of the material UI components\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//       '& > *': {\r\n//         margin: theme.spacing(1),\r\n//         width: '50ch',\r\n//       },\r\n//     },\r\n//     fab: {\r\n//         margin: theme.spacing(2),\r\n//         width: \"5ch\",\r\n//         height: \"5ch\"\r\n//       },\r\n//     absolute: {\r\n//     position: 'absolute',\r\n//     bottom: theme.spacing(1),\r\n//     right: theme.spacing(0),\r\n//     },\r\n//   }));\r\n\r\n//What happens when you click the delete icon on the Chip\r\n// const handleDelete = () => {\r\n// console.info('You clicked the delete icon.');\r\n// };\r\n\r\n//What is actually rendered on the screen\r\n//export default function NewTest(props){\r\nclass AddTest extends (react.Component){\r\n  constructor(props){\r\n    super (props);\r\n    this.state = {id:0, testId:'', testDescription:''}\r\n  }\r\n    \r\nhandleSubmit(event) {\r\n  console.log(event);\r\n  event.preventDefault();\r\n\r\n  if (!this.state.testId || !this.state.testDescription ) {\r\n    alert('All fields are required');\r\n  } else {\r\n    this.props.addTest({id: this.state.id, testId: this.state.testId, testDescription: this.state.testDescription});\r\n    this.setState({id: this.state.id+1, testId: '', testDescription: ''});\r\n  }\r\n}\r\n\r\nupdateTestId(event) {\r\n  this.setState({id: this.state.id})\r\n  this.setState({testId: event.target.value});\r\n}\r\nupdateTestDescription(event) {\r\n  this.setState({testDescription: event.target.value});\r\n}\r\n\r\n\r\nrender(){\r\n  return(\r\n    <div>\r\n        <br/>\r\n        <br/>\r\n    <Typography variant=\"h4\" gutterBottom>New Test Procedure</Typography>\r\n    <br/>\r\n    <Typography variant=\"body1\" gutterBottom>Fill out all items below than click submit when completed.</Typography>\r\n    <br/>\r\n    {/*Start of the form area */}\r\n    <form onSubmit={(e) => this.handleSubmit(e)} noValidate autoComplete=\"off\">\r\n      <TextField id=\"standard-required\" value={this.state.testId} onChange={(e) => this.updateTestId(e)} label=\"Test ID\" defaultValue=\"\"/>\r\n      <br/>\r\n      <TextField id=\"standard-multiline-flexible\" value={this.state.testDescription} onChange={(e) => this.updateTestDescription(e)} label=\"Test Description\" multiline maxRows={4} />\r\n      <br/><br/>\r\n      {/*Insert data from hold.txt here */}\r\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">Add to Library</Button>\r\n    </form>\r\n    </div>\r\n)\r\n}\r\n   \r\n}\r\nfunction mapStateToProps (state) {\r\n\treturn {};\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n\treturn {\r\n    addTest: function (data) {\r\n      dispatch(addTest(data))\r\n    }\r\n  }\r\n}\r\n\r\nvar ConnectedAddItem = connect(mapStateToProps, mapDispatchToProps)(AddTest);\r\nexport default ConnectedAddItem;","export function addTest (data){\r\n    return{\r\n        type: 'ADD_TEST',\r\n        data: data\r\n    }\r\n}\r\n\r\n\r\n\r\n//None of the below are being used\r\nexport function addTestId (data){\r\n    return{\r\n        type: 'ADD_TEST_ID',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport function addTestDescription (data){\r\n    return{\r\n        type: 'ADD_TEST_DESCRIPTION',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport function addMaterial (data){\r\n    return{\r\n        type: 'ADD_MATERIAL',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport function removeMaterial (data){\r\n    return{\r\n        type: 'REMOVE_MATERIAL',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport function modifyMaterial(data){\r\n    return{\r\n        type: 'MODIFY_MATERIAL',\r\n        data: data\r\n    }\r\n}\r\n","import React, {useRef} from 'react'\r\nimport {useReactToPrint} from 'react-to-print';\r\n\r\nconst ref = React.createRef();\r\n\r\nconst Print = (props) =>{\r\n    return(\r\n        <div className=\"Print\" ref={ref}>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n  export default Print","import React, {useRef} from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport {render} from 'react-dom'\r\nimport Print from './Print.jsx'\r\n\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nclass TestPrint extends React.Component {\r\n    render() {\r\n      return(\r\n        <div>\r\n          <br/>\r\n          <br/>\r\n          <Typography variant=\"h4\" gutterBottom>Print out Test Procedure</Typography>\r\n          <br/>\r\n          <Typography variant=\"body1\" gutterBottom>Review and print</Typography>\r\n                <TableContainer component={Paper} >\r\n                <Table aria-label='leaderboard' >\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Test ID</TableCell>\r\n                            {this.props.testProcedure.map((item,index)=>{\r\n                            return <TableCell key={index} align=\"left\">{item.testId}</TableCell>\r\n                          })}  \r\n                        </TableRow>\r\n                      \r\n                    </TableHead>                     \r\n\r\n                        <TableBody>\r\n                            \r\n                        {this.props.testProcedure.map((item,index)=>{\r\n                        return <TableRow key={index}>\r\n                            <TableCell component=\"th\" scope=\"row\">Test Description</TableCell>\r\n                            <TableCell align=\"left\">{item.testDescription}</TableCell> \r\n                        </TableRow>\r\n                        })}                                                        \r\n                    </TableBody>                      \r\n                </Table>\r\n            </TableContainer>  \r\n            <Print/>\r\n        </div>\r\n        \r\n      )\r\n      \r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n  function mapStateToProps (state) {\r\n    return {testProcedure: state.testProcedure};\r\n  }\r\n  \r\n  function mapDispatchToProps (dispatch) {\r\n    return {\r\n      TestPrint: function (data) {\r\n        dispatch(TestPrint(data))\r\n      }\r\n    }\r\n  }\r\n  var ConnectedTestPrint = connect(mapStateToProps, mapDispatchToProps)(TestPrint);\r\n  console.log(ConnectedTestPrint)\r\n\r\n  export default ConnectedTestPrint;\r\n","import deepcopy from 'deepcopy';\r\n\r\nlet initialProcedure ={\r\n    testProcedure:[\r\n        {id: 0, \r\n            testId: \"pH by Probe\", \r\n            testDescription: \"Get the pH of a liquid via probe (1-6 acidic, 7 neutral, 8-14 basic)\"},\r\n        {id: 1, \r\n            testId: \"Density by Hydrometer\", \r\n            testDescription: \"Get the density of a liquid via hydrometer (Density of pure water at ambient conditions = 1.000g/mL)\"},\r\n    ]\r\n}\r\n\r\n\r\n\r\nfunction testProcedure(state, action){\r\n    if (state === undefined){\r\n        return initialProcedure;\r\n    }\r\n    let new_state = deepcopy(state);\r\n    \r\n    if (action.type === 'ADD_TEST'){\r\n\r\n        //     new_state.testProcedure.push({\r\n                \r\n        //         // id: action.data.id + 1,\r\n        //         // testId: action.data.testId, \r\n        //         // testDescription: action.data.testDescription, \r\n        // });\r\n         new_state.testProcedure.push(action.data)\r\n        \r\n\r\n    }else if (action.type === 'ADD_MATERIAL'){\r\n\r\n    }else if (action.type === 'REMOVE_MATERIAL'){\r\n        \r\n    }\r\n    else if (action.type === 'MODIFY_MATERIAL'){\r\n        \r\n    }\r\n    return new_state;\r\n\r\n    //let new_state = deepcopy(state);\r\n}\r\n\r\nexport default testProcedure;","import {createStore} from 'redux';\r\n\r\nimport testProcedure from './reducer.js'\r\n\r\nvar store = createStore(testProcedure);\r\nexport default store;","import { Switch, Route } from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\n//components\nimport NavBar from './components/NavBar.jsx';\nimport TestLibrary from './components/TestLibrary.jsx'\nimport NewTest from './components/NewTest.jsx'\nimport TestPrint from './components/TestPrint.jsx'\n\n\n//redux\nimport store from './redux/store.js';\n\n\nimport React from 'react';\nimport './App.css';\n\n\n//used incase no url is found\nconst NoMatch = ({location}) => (\n  \n  <div>\n    <h3>Page not Found: {location.pathname}</h3>\n  </div>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n     <Provider store={store}>\n        <Switch>\n          <Route exact path='/'>\n            <NavBar/>\n            <TestLibrary/>\n          </Route>\n\n          <Route path='/newtest'>\n            <NavBar/>\n            <NewTest/>\n          </Route>\n      \n          <Route path={`/test/:id`}>\n            <NavBar/>\n            <TestPrint/>\n          </Route>\n\n          <Route component={NoMatch}></Route>\n        </Switch>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}